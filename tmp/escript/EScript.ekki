/* ----------------------------------------------------------------
	This file is part of the EkkiEkkiKateng build tool.
	Copyright (C) 2013-2014 Claudius Jähn (ClaudiusJ@live.de)
	Licensed under the MIT License. See LICENSE file for details.
	https://github.com/ClaudiusJ/EkkiEkkiKateng
   ---------------------------------------------------------------- */
Runtime.setLoggingLevel(Runtime.LOG_PEDANTIC_WARNING);

outln("-"*79);
outln("This script creates a CodeBlocks project file for EScript using EkkiEkkiKateng.");
outln("EScript version: ",EScript.VERSION_STRING);
outln("CodeBlocks: http://www.codeblocks.org");
outln("EkkiEkkiKateng: https://github.com/ClaudiusJ/EkkiEkkiKateng");
outln("-"*79);

// ------
outln("Loading EScript Std library...");
assert(EScript.VERSION >= 701, "wrong EScript version (requires >=701)");
static module = load( IO.dirname(args[0])+ "/Std/module.escript"); // load Std lib module loader (relative to EScript executable)
module.addSearchPath( IO.dirname(args[0]) ); // search path for Std lib
module.addSearchPath( IO.condensePath(IO.dirname(args[0])+"\\..") ); // search path for EkkiEkkiKateng

// ------
outln("Loading EkkiEkkiKateng...");

outln("EkkiEkkiKateng Version: ",module('EkkiEkkiKateng/Version') );
assert(module('EkkiEkkiKateng/Version') >= 0.2,"wrong EkkiEkkiKateng version (requires>0.2)");

var Node = module('EkkiEkkiKateng/Node');
var FileUtils = module('EkkiEkkiKateng/FileUtils');

var CompilerOptions = module('EkkiEkkiKateng/CompilerOptions');
var LinkerOptions = module('EkkiEkkiKateng/LinkerOptions');
var Projects = module('EkkiEkkiKateng/Projects');
var Files = module('EkkiEkkiKateng/Files');
var Targets = module('EkkiEkkiKateng/Targets');
var VirtualTargets = module('EkkiEkkiKateng/VirtualTargets');

// ------
var configFileName = __FILE__.substr(0,__FILE__.rFind("."))+".ekki.txt";
outln("Creating/loading config file '",configFileName,"'...");

var config = new (module('Std/JSONDataStore'))(true);
config.init( configFileName, false);

static folder_base = config.get('Project.Folders.base', IO.condensePath( (__DIR__).replaceAll('\\','/') ));


// ------
outln("Creating project graph...");

var project = Projects.createNode( config.get('Project.name',"EScript") );

CompilerOptions.setCompilerId( project, config.get('Project.compilerId',"gcc") );
CompilerOptions.addOptions( project, config.get('Project.compilerOptions',[
			"-std=c++11",
			"-pedantic","-Wall","-Wextra","-Wshadow","-Wcast-qual","-Wcast-align","-Wlogical-op",
			"-Wredundant-decls","-Wdisabled-optimization","-Wstack-protector","-Winit-self","-Wmissing-include-dirs",
			"-Wswitch-default","-Wswitch-enum","-Wctor-dtor-privacy","-Wstrict-null-sentinel","-Wno-non-template-friend",
			"-Wold-style-cast","-Woverloaded-virtual","-Wno-pmf-conversions","-Wsign-promo","-Wmissing-declarations"
]));

var allFiles = new Node;
foreach(FileUtils.scanFiles( folder_base, 
						config.get('Project.includeFiles',[".cpp",".h",".escript",".txt",".rc",".ekki"] ) ) as var filename){
	if(!filename.contains('- Kopie'))
		allFiles += Files.createNode(filename);
}
foreach( config.get('Project.targets',{
			'Application' : {
				'type' : 'CONSOLE_APP',
				'output' : "EScript",
				'objectFolder' : ".obj/app",
				'compilerOptions' : [ "-g","-O3","-DES_BUILD_APPLICATION" ],
				'linkerOptions' : ["-s"]
			},
			'Tests' : {
				'type' : 'CONSOLE_APP',
				'output' : "EScriptTest",
				'objectFolder' : ".obj/test",
				'compilerOptions' : [ "-g","-O3","-DES_BUILD_TEST_APPLICATION" ],
				'linkerOptions' : []
			},
			'StaticLib' : {
				'type' : 'STATIC_LIB',
				'output' : "EScriptTest",
				'objectFolder' : ".obj/test",
				'compilerOptions' : [ "-g","-O3" ],
				'linkerOptions' : []
			}
		})	as var targetName, var targetDescription){
	var targetNode = Targets.createNode( targetName );
	switch( targetDescription['type'] ){
		case 'CONSOLE_APP':
			Targets.setType_ConsoleApp( targetNode );
			break;
		case 'STATIC_LIB':
			Targets.setType_StaticLib( targetNode );
			break;
		default:
			Runtime.exception("Invalid target type: "+targetDescription['type']);
	}
	Targets.setOutput( targetNode, targetDescription['output'] );
	Targets.setObjectFolder( targetNode, targetDescription['objectFolder']);
	CompilerOptions.addOptions(targetNode, targetDescription['compilerOptions']);
	LinkerOptions.addOptions(targetNode, targetDescription['linkerOptions']);
	targetNode += allFiles;
	project += targetNode;
}

{
	var vTarget = VirtualTargets.createNode("All");
	foreach( Targets.collect( project ) as var target)
		vTarget += target;

	project += vTarget;
//	outln( vTarget.toDbgString() );
}


// ------
var projectFileName = config.get('Project.projectFile',"EScript.cbp");
outln("Exporting CodeBlocks project '",projectFileName,"'...");

var generator = module('EkkiEkkiKateng/CodeBlocksGenerator');

IO.saveTextFile(projectFileName, generator.createProject( project ));


//print_r(project.toDbgString());
return true;

