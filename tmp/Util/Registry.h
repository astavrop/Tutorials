/*
	This file is part of the Util library.
	Copyright (C) 2013 Benjamin Eikel <benjamin@eikel.org>
	
	This library is subject to the terms of the Mozilla Public License, v. 2.0.
	You should have received a copy of the MPL along with this library; see the 
	file LICENSE. If not, you can obtain one at http://mozilla.org/MPL/2.0/.
*/
#ifndef UTIL_REGISTRY_H
#define UTIL_REGISTRY_H

#include <utility>

namespace Util {

/**
 * @brief Handle used by Registry
 * 
 * Handle that points to an element inside a registry. I can only be
 * constructed by calling Registry::registerElement().
 * 
 * @tparam container_t Container type used by the registry
 * @author Benjamin Eikel
 * @date 2013-11-21
 */
template<typename container_t>
class RegistryHandle {
	private:
		template<typename type_t> friend class Registry;

		typedef typename container_t::iterator iterator_t;

		iterator_t iter;

		RegistryHandle(iterator_t iterOfNewElement) :
			iter(std::move(iterOfNewElement)) {
		}

	public:
		RegistryHandle(RegistryHandle &&) = default;
		RegistryHandle(const RegistryHandle &) = delete;
		RegistryHandle & operator=(RegistryHandle &&) = default;
		RegistryHandle & operator=(const RegistryHandle &) = delete;
};

/**
 * @brief Registry for indistinguishable elements
 * 
 * Registry for elements that cannot be compared with @c operator==() (e.g.,
 * functions created with std::bind). The registration of an element returns a
 * handle. The handle has to be used to cancel the registration of the element.
 * 
 * @tparam container_t Container that will be used to store the registered
 * elements. Calling the container's insert and erase functions must not
 * invalidate any iterators (except that of the erased element). Therefore,
 * std::list and std::multiset can be used here. If a std::multiset is used,
 * the elements have to be comparable with @c operator<().
 * @author Benjamin Eikel
 * @date 2013-11-21
 */
template<typename container_t>
class Registry {
	private:
		//! Container storing the registered elements.
		container_t container;

	public:
		//! Type of elements that are stored in the registry.
		typedef typename container_t::value_type element_t;

		//! Handle to a registered element. Required to unregister the element.
		typedef RegistryHandle<container_t> handle_t;

		/**
		 * Register an element.
		 * 
		 * @param element Element that will be registered.
		 * @return Handle to the element that has been registered. The handle
		 * is required to unregister the element.
		 */
		handle_t registerElement(element_t element) {
			return handle_t(container.insert(container.begin(), 
											 std::move(element)));
		}

		/**
		 * Cancel the registration of an element.
		 * 
		 * @param handle Handle to the element that has been generated by a
		 * call to registerElement().
		 */
		void unregisterElement(handle_t handle) {
			container.erase(handle.iter);
		}

		//! Access the currently registered elements.
		const container_t & getElements() const {
			return container;
		}

		//! Get a copy of the currently registered elements.
		container_t getElementsCopy() const {
			return container;
		}
};

}

#endif /* UTIL_REGISTRY_H */
